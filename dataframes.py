# -*- coding: utf-8 -*-
"""DataFrames.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12PQvkGfobR4Uz1_HcevbtAUGuOWYQ54q

# **DataFrames**

In this notebook I will review how to use dataframes.
I will use stock prices for the sample.
"""

# import libraries
import pandas as pd

# load the data
# get the stock data
stockTicker = 'AAPL'

# Set dates
startDate = '2008-01-01'

from datetime import date
today = date.today()
print("Today's date:", today)
endDate = today

# endDate = '2020-01-01'

# get stock quotes using web datareader
import pandas_datareader as web

# get the stock quote
df = web.DataReader(stockTicker, data_source='yahoo', start=startDate, end=endDate)
print(df) # print df sample data

"""You can also load data from a csv file

Example.
Load dataset.

dftrain = pd.read_csv('https://storage.googleapis.com/tf-datasets/titanic/train.csv')
"""

# explore the data set
print(df.shape)

print(df.info)

df.describe

df.dtypes # shows data type for each column

print(df.head(10))
print(df.tail(2))

# Get the last row
print(df[-1:])
print(df.tail(1))

# loc
# label based indexing
df.loc[:,"Open"] # all rows, column "Open"
df.loc[:,["Open", "Date"]] #all rows, column "Open" and column "Date"
df[["Open", "Date"]] #all rows, column "Open" and column "Date"

# create new series from an existing dataframe (series is a single column dataframe)
abc=df.loc[:,"Open"] #all rows, only column "Open"
type(abc)

# print the first row of the dataset
print(df.loc[1])

print(df.index) # print the index row, in this case is the Date column

print(df.columns) # print a list of columns in the dataframe

print(len(df)) # print the number of rows of the dataframe

df.describe()

# remove the column Low and put its values in a new variable
low_prices = df.pop('Low')

print(low_prices)

df.Close.hist(bins=5000)

df.Close.plot(kind='barh')

df.Volume.value_counts()

# copy df dataframe and change index to a numeric col
df2=df
print(df2.head())
print(df2.index)

df2['Date']=df2.index # create a new column called Date and copy values from column index
print(df2.head())
print(df2.index)

# change the index column values with a numeric sequence
df2.index=range(1, len(df2)+1)
print(df2.head())
print(df2.index)

# First calculate the mid prices from the highest and lowest
high_prices = df.loc[:,'High'].values # create an nparray with the High column, all rows
low_prices = df.loc[:,'Low'].values
mid_prices = (high_prices+low_prices)/2.0

print(type(high_prices))

print(low_prices)

# Filter data
# df3=df.loc[df["Stock"]=='GOOGL', :] #filter condition Stock = GOOGL
#df3

df3=df.loc[df["Close"]<60, :]
df3

#stocks AAPL, MSFT, GOOGL
#df[df["Stock"].isin(["AAPL","MSFT","GOOGL"])] #isin operator

#df[~df["Stock"].isin(["AAPL","MSFT","GOOGL"])] #~isin operator

# Regular Expressions

#and condition
df3=df.loc[(df["High"]>60) & (df["High"]<90), :]
df3

#reset indexes
df3.reset_index(inplace=True, drop = True)

#inplace means we will re index in the same dataset
#drop = True remove the Index column coming from df

#sorting
df3=df3.sort_values(by="Close", ascending= False)

# df4=df.sort_values(by=["Industry","Stock"], ascending= [True, False])
df4

#create a column based in a condition
import numpy as np
df["new_column"]=np.where(df["High"]<90, "Low EPS", "High EPS")
df

#grouping data
#SAC: Split Apply Combine
import pandas as pd
df = pd.read_csv("stock.csv")
df

#group by Industry
#for the column Annual Dividend
#calculate the mean value

df.groupby("Industry")["Annual Dividend"].agg("mean")
#or
df.groupby("Industry")["Annual Dividend"].mean()

dataframegrouped= df.groupby(["Industry","FY Month End"]) 
dataframegrouped.groups #return groups info

#group by Industry
# min and max date Last Updated
# mean EPS

df["Last Updated"]=pd.to_datetime(df["Last Updated"])
df.groupby("Industry").agg({"Last Updated":["min","max"], "EPS":["mean"]})

#save dataframe as csv file
df.to_csv("my df file.csv")

# Data Visualization
import matplotlib.pyplot as plt

plt.figure(figsize = (18,9))
plt.title('Stock Price (close) and Average Price (avg. high and low)')
plt.plot(df2.index, df2['Close'], color = 'red', label='Close Price')

plt.plot(range(df2.shape[0]),df2['Close'], label='Close Price')

plt.xticks(range(0,df2.shape[0],500),df2['Date'].loc[::500],rotation=45)
plt.xlabel('Date',fontsize=18)
plt.ylabel('Close Price',fontsize=18)
plt.show()

